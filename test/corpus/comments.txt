==================
Comments
==================

// I'm a comment
/// I'm a doc-comment
"hello" // another comment
/* block comment */
/* can /* be /* nested */ */ */

---

(source_file
  (line_comment)
  (doc_comment)
  (exp_dec
    (lit_exp
      (text_literal)))
  (line_comment)
  (block_comment
    (comment_text))
  (block_comment
    (comment_text)
    (block_comment
      (comment_text)
      (block_comment
        (comment_text)))))

==================
Text
==================

"hello"
---

(source_file
  (exp_dec
    (lit_exp
      (text_literal))))

==================
Text
==================

"hello";
10
---

(source_file
  (exp_dec
    (lit_exp
      (text_literal)))
  (exp_dec
    (lit_exp
      (int_literal))))

==================
Lets
==================

let x = 10;
let y = 10 else 20;
---

(source_file
  (let_dec
    (var_pat
      (identifier))
    (lit_exp
      (int_literal)))
  (let_else_dec
    (let_dec
      (var_pat
        (identifier))
      (lit_exp
        (int_literal)))
    (lit_exp
      (int_literal))))

==================
Ifs
==================

let x = if (true) 20;
let y = if (true) 20 else 30;
let y = if (true) 20 else if (false) 30 else 40;

let x = (if (true) 20) else 30;
let x = if (true) 20 else 30 else 40;
---

(source_file
  (let_dec
    (var_pat
      (identifier))
    (if_exp
      (lit_exp
        (bool_literal))
      (lit_exp
        (int_literal))))
  (let_dec
    (var_pat
      (identifier))
    (if_exp
      (lit_exp
        (bool_literal))
      (lit_exp
        (int_literal))
      (lit_exp
        (int_literal))))
  (let_dec
    (var_pat
      (identifier))
    (if_exp
      (lit_exp
        (bool_literal))
      (lit_exp
        (int_literal))
      (if_exp
        (lit_exp
          (bool_literal))
        (lit_exp
          (int_literal))
        (lit_exp
          (int_literal)))))
  (let_else_dec
    (let_dec
      (var_pat
        (identifier))
      (par_exp
        (if_exp
          (lit_exp
            (bool_literal))
          (lit_exp
            (int_literal)))))
    (lit_exp
      (int_literal)))
  (let_else_dec
    (let_dec
      (var_pat
        (identifier))
      (if_exp
        (lit_exp
          (bool_literal))
        (lit_exp
          (int_literal))
        (lit_exp
          (int_literal))))
    (lit_exp
      (int_literal))))
