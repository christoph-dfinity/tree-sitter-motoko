=========
Error.test.mo
=========

import Error "../src/Error";

import Suite "mo:matchers/Suite";
import T "mo:matchers/Testable";
import M "mo:matchers/Matchers";

let { run; test; suite } = Suite;

class ErrorCodeTestable() : T.Testable<Error.ErrorCode> {
  public func display(code : Error.ErrorCode) : Text {
    debug_show (code)
  };
  public func equals(first : Error.ErrorCode, second : Error.ErrorCode) : Bool {
    first == second
  }
};

let testMessage = "Test error message";

run(
  suite(
    "reject",
    [
      test(
        "error code",
        Error.code(Error.reject(testMessage)),
        M.equals({ { item = #canister_reject } and ErrorCodeTestable() })
      ),
      test(
        "error message",
        Error.message(Error.reject(testMessage)),
        M.equals(T.text(testMessage))
      )
    ]
  )
)

---

(source_file
  (import
    (var_pat
      (identifier))
    (text_literal))
  (import
    (var_pat
      (identifier))
    (text_literal))
  (import
    (var_pat
      (identifier))
    (text_literal))
  (import
    (var_pat
      (identifier))
    (text_literal))
  (let_dec
    (obj_pat
      (pat_field
        (identifier))
      (pat_field
        (identifier))
      (pat_field
        (identifier)))
    (var_exp
      (identifier)))
  (class_dec
    (type_identifier)
    (tup_pat)
    (typ_annot
      (path_typ
        (typ_path
          (identifier)
          (type_identifier))
        (path_typ
          (typ_path
            (identifier)
            (type_identifier)))))
    (class_body
      (obj_body
        (dec_field
          (vis)
          (func_dec
            (identifier)
            (tup_pat
              (annot_pat
                (var_pat
                  (identifier))
                (typ_annot
                  (path_typ
                    (typ_path
                      (identifier)
                      (type_identifier))))))
            (typ_annot
              (path_typ
                (typ_path
                  (type_identifier))))
            (func_body
              (block_exp
                (exp_dec
                  (debug_show_exp
                    (par_exp
                      (var_exp
                        (identifier)))))))))
        (dec_field
          (vis)
          (func_dec
            (identifier)
            (tup_pat
              (annot_pat
                (var_pat
                  (identifier))
                (typ_annot
                  (path_typ
                    (typ_path
                      (identifier)
                      (type_identifier)))))
              (annot_pat
                (var_pat
                  (identifier))
                (typ_annot
                  (path_typ
                    (typ_path
                      (identifier)
                      (type_identifier))))))
            (typ_annot
              (path_typ
                (typ_path
                  (type_identifier))))
            (func_body
              (block_exp
                (exp_dec
                  (bin_exp_object
                    (var_exp
                      (identifier))
                    (rel_op)
                    (var_exp
                      (identifier)))))))))))
  (let_dec
    (var_pat
      (identifier))
    (lit_exp
      (text_literal)))
  (exp_dec
    (call_exp_object
      (var_exp
        (identifier))
      (par_exp
        (call_exp_object
          (var_exp
            (identifier))
          (par_exp
            (lit_exp
              (text_literal))
            (array_exp
              (call_exp_object
                (var_exp
                  (identifier))
                (par_exp
                  (lit_exp
                    (text_literal))
                  (call_exp_object
                    (dot_exp_object
                      (var_exp
                        (identifier))
                      (identifier))
                    (par_exp
                      (call_exp_object
                        (dot_exp_object
                          (var_exp
                            (identifier))
                          (identifier))
                        (par_exp
                          (var_exp
                            (identifier))))))
                  (call_exp_object
                    (dot_exp_object
                      (var_exp
                        (identifier))
                      (identifier))
                    (par_exp
                      (object_exp
                        (object_exp
                          (exp_field
                            (identifier)
                            (hash_exp
                              (identifier))))
                        (call_exp_object
                          (var_exp
                            (identifier))
                          (par_exp)))))))
              (call_exp_object
                (var_exp
                  (identifier))
                (par_exp
                  (lit_exp
                    (text_literal))
                  (call_exp_object
                    (dot_exp_object
                      (var_exp
                        (identifier))
                      (identifier))
                    (par_exp
                      (call_exp_object
                        (dot_exp_object
                          (var_exp
                            (identifier))
                          (identifier))
                        (par_exp
                          (var_exp
                            (identifier))))))
                  (call_exp_object
                    (dot_exp_object
                      (var_exp
                        (identifier))
                      (identifier))
                    (par_exp
                      (call_exp_object
                        (dot_exp_object
                          (var_exp
                            (identifier))
                          (identifier))
                        (par_exp
                          (var_exp
                            (identifier)))))))))))))))
