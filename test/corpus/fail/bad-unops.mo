=========
bad-unops.mo
=========

let a = ^3; // type error, operator is not defined for operand type
let b = ^-5; // type error, operator is not defined for operand type
let c : Nat = +3; // literal type mismatch
let d : Nat = -3; // literal type mismatch

switch (1) { case (^1) { ignore "hmmm" }; case _ { ignore "unexpected" } }; // type error, operator cannot consume expected type
switch (1) { case (+1) { ignore "unexpected" }; case _ { ignore "hmmm" } }; // ok
switch (1) { case (-1) { ignore "hmmm" }; case _ { ignore "unexpected" } }; // ok, redundant

switch (-1) { case (^1) { ignore "hmmm" }; case _ { ignore "unexpected" } }; // type error, operator cannot consume expected type
ignore (switch (-1) { case (+1) "hmmm"; case _ "as expected" });
ignore (switch (-1) { case (-1) "as expected"; case _ "hmmm" });

ignore (switch (^1 : Int8) { case (^1) "as expected"; case _ "hmmm" });
ignore (switch (+1 : Int8) { case (+1) "as expected"; case _ "hmmm" });
ignore (switch (-1 : Int8) { case (-1) "as expected"; case _ "hmmm" });

// when testing the switch expression in the REPL, I either
//  * expect the result being "as expected", or
//  * a type error (as described in the comment)
//
// test steps wrapped in ignore should type-check

---

(source_file
  (let_dec
    (var_pat
      (identifier))
    (unop_exp
      (unop)
      (lit_exp
        (int_literal))))
  (line_comment)
  (let_dec
    (var_pat
      (identifier))
    (unop_exp
      (unop)
      (lit_exp
        (int_literal))))
  (line_comment)
  (let_dec
    (annot_pat
      (var_pat
        (identifier))
      (typ_annot
        (path_typ
          (typ_path
            (type_identifier)))))
    (lit_exp
      (int_literal)))
  (line_comment)
  (let_dec
    (annot_pat
      (var_pat
        (identifier))
      (typ_annot
        (path_typ
          (typ_path
            (type_identifier)))))
    (lit_exp
      (int_literal)))
  (line_comment)
  (exp_dec
    (switch_exp
      (par_exp
        (lit_exp
          (int_literal)))
      (case
        (tup_pat
          (unop_pat
            (unop)
            (int_literal)))
        (block_exp
          (exp_dec
            (ignore_exp
              (lit_exp
                (text_literal))))))
      (case
        (wild_pat)
        (block_exp
          (exp_dec
            (ignore_exp
              (lit_exp
                (text_literal))))))))
  (line_comment)
  (exp_dec
    (switch_exp
      (par_exp
        (lit_exp
          (int_literal)))
      (case
        (tup_pat
          (lit_pat
            (int_literal)))
        (block_exp
          (exp_dec
            (ignore_exp
              (lit_exp
                (text_literal))))))
      (case
        (wild_pat)
        (block_exp
          (exp_dec
            (ignore_exp
              (lit_exp
                (text_literal))))))))
  (line_comment)
  (exp_dec
    (switch_exp
      (par_exp
        (lit_exp
          (int_literal)))
      (case
        (tup_pat
          (lit_pat
            (int_literal)))
        (block_exp
          (exp_dec
            (ignore_exp
              (lit_exp
                (text_literal))))))
      (case
        (wild_pat)
        (block_exp
          (exp_dec
            (ignore_exp
              (lit_exp
                (text_literal))))))))
  (line_comment)
  (exp_dec
    (switch_exp
      (par_exp
        (lit_exp
          (int_literal)))
      (case
        (tup_pat
          (unop_pat
            (unop)
            (int_literal)))
        (block_exp
          (exp_dec
            (ignore_exp
              (lit_exp
                (text_literal))))))
      (case
        (wild_pat)
        (block_exp
          (exp_dec
            (ignore_exp
              (lit_exp
                (text_literal))))))))
  (line_comment)
  (exp_dec
    (ignore_exp
      (par_exp
        (switch_exp
          (par_exp
            (lit_exp
              (int_literal)))
          (case
            (tup_pat
              (lit_pat
                (int_literal)))
            (lit_exp
              (text_literal)))
          (case
            (wild_pat)
            (lit_exp
              (text_literal)))))))
  (exp_dec
    (ignore_exp
      (par_exp
        (switch_exp
          (par_exp
            (lit_exp
              (int_literal)))
          (case
            (tup_pat
              (lit_pat
                (int_literal)))
            (lit_exp
              (text_literal)))
          (case
            (wild_pat)
            (lit_exp
              (text_literal)))))))
  (exp_dec
    (ignore_exp
      (par_exp
        (switch_exp
          (par_exp
            (annot_exp_object
              (unop_exp
                (unop)
                (lit_exp
                  (int_literal)))
              (path_typ
                (typ_path
                  (type_identifier)))))
          (case
            (tup_pat
              (unop_pat
                (unop)
                (int_literal)))
            (lit_exp
              (text_literal)))
          (case
            (wild_pat)
            (lit_exp
              (text_literal)))))))
  (exp_dec
    (ignore_exp
      (par_exp
        (switch_exp
          (par_exp
            (annot_exp_object
              (lit_exp
                (int_literal))
              (path_typ
                (typ_path
                  (type_identifier)))))
          (case
            (tup_pat
              (lit_pat
                (int_literal)))
            (lit_exp
              (text_literal)))
          (case
            (wild_pat)
            (lit_exp
              (text_literal)))))))
  (exp_dec
    (ignore_exp
      (par_exp
        (switch_exp
          (par_exp
            (annot_exp_object
              (lit_exp
                (int_literal))
              (path_typ
                (typ_path
                  (type_identifier)))))
          (case
            (tup_pat
              (lit_pat
                (int_literal)))
            (lit_exp
              (text_literal)))
          (case
            (wild_pat)
            (lit_exp
              (text_literal)))))))
  (line_comment)
  (line_comment)
  (line_comment)
  (line_comment)
  (line_comment))
