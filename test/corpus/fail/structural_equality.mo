=========
structural_equality.mo
=========

(func (x : Nat) : Nat = x) == (func (x : Nat) : Nat = x);

{ var x = 10 } == { var x = 10 };

class A() { public func inner() : Nat = 1 };
A() == A();

ignore ({ x = 10 } == { var x = 10 });

assert(10 == "hi");

func myEq<A>(x : A, y : A) : Bool = x == y;
func myEq2<A, B>(x : A, y : B) : Bool = x == y;

---

(source_file
  (exp_dec
    (bin_exp_object
      (par_exp
        (func_exp
          (tup_pat
            (annot_pat
              (var_pat
                (identifier))
              (typ_annot
                (path_typ
                  (typ_path
                    (type_identifier))))))
          (typ_annot
            (path_typ
              (typ_path
                (type_identifier))))
          (func_body
            (var_exp
              (identifier)))))
      (rel_op)
      (par_exp
        (func_exp
          (tup_pat
            (annot_pat
              (var_pat
                (identifier))
              (typ_annot
                (path_typ
                  (typ_path
                    (type_identifier))))))
          (typ_annot
            (path_typ
              (typ_path
                (type_identifier))))
          (func_body
            (var_exp
              (identifier)))))))
  (exp_dec
    (bin_exp_object
      (object_exp
        (exp_field
          (identifier)
          (lit_exp
            (int_literal))))
      (rel_op)
      (object_exp
        (exp_field
          (identifier)
          (lit_exp
            (int_literal))))))
  (class_dec
    (type_identifier)
    (tup_pat)
    (class_body
      (obj_body
        (dec_field
          (vis)
          (func_dec
            (identifier)
            (tup_pat)
            (typ_annot
              (path_typ
                (typ_path
                  (type_identifier))))
            (func_body
              (lit_exp
                (int_literal))))))))
  (exp_dec
    (bin_exp_object
      (call_exp_object
        (var_exp
          (identifier))
        (par_exp))
      (rel_op)
      (call_exp_object
        (var_exp
          (identifier))
        (par_exp))))
  (exp_dec
    (ignore_exp
      (par_exp
        (bin_exp_object
          (object_exp
            (exp_field
              (identifier)
              (lit_exp
                (int_literal))))
          (rel_op)
          (object_exp
            (exp_field
              (identifier)
              (lit_exp
                (int_literal))))))))
  (exp_dec
    (assert_exp
      (par_exp
        (bin_exp_object
          (lit_exp
            (int_literal))
          (rel_op)
          (lit_exp
            (text_literal))))))
  (func_dec
    (identifier)
    (typ_params
      (typ_bind
        (type_identifier)))
    (tup_pat
      (annot_pat
        (var_pat
          (identifier))
        (typ_annot
          (path_typ
            (typ_path
              (type_identifier)))))
      (annot_pat
        (var_pat
          (identifier))
        (typ_annot
          (path_typ
            (typ_path
              (type_identifier))))))
    (typ_annot
      (path_typ
        (typ_path
          (type_identifier))))
    (func_body
      (bin_exp_object
        (var_exp
          (identifier))
        (rel_op)
        (var_exp
          (identifier)))))
  (func_dec
    (identifier)
    (typ_params
      (typ_bind
        (type_identifier))
      (typ_bind
        (type_identifier)))
    (tup_pat
      (annot_pat
        (var_pat
          (identifier))
        (typ_annot
          (path_typ
            (typ_path
              (type_identifier)))))
      (annot_pat
        (var_pat
          (identifier))
        (typ_annot
          (path_typ
            (typ_path
              (type_identifier))))))
    (typ_annot
      (path_typ
        (typ_path
          (type_identifier))))
    (func_body
      (bin_exp_object
        (var_exp
          (identifier))
        (rel_op)
        (var_exp
          (identifier))))))
